#!/usr/bin/env bash


SECTOR=''
DEBUGIT=0
dstem=''

USAGE="
  Usage: tica-wcs-spoc SECTOR=<sector> dstem=<data_dir_path> DEBUGIT=<debug_flag>

  This script runs step2_mkwcs.py. step2_mkwcs.py is a python script
    that loops over FFIs in a given directory, measures star
    positions, fits WCS coefficients, and adds the WCSs to the FFI
    headers.  The python script also adds a binary table extension to
    the FITS files that stores the measurements of the star centroids.
    The FITS files are modified in place.

  This script works exclusively on raw SPOC FFIs (*ffir*fits files).
    *ffir*fits files can be downloaded from
    https://archive.stsci.edu/tess/bulk_downloads/bulk_downloads_ffi-tp-lc-dv.html.

  This script and step2_mkwcs.py require a reference file that
    contains the RAs and DECs of suitable stars for fitting the WCS.
    You need to download these reference files from MAST
    (https://archive.stsci.edu/hlsp/tica; click on the `Ref Star`
    hyperlink for the sector that matches <SECTOR>).  The reference
    files are saved in .h5 format, and this script assumes that the
    reference files are saved in <data_dir_path>/ref_stars.

  <sector> is a two digit integer.  It is used in calls to the
    tess-point python package, in order to convert row/col to ra/dec.

  <data_dir_path> is the directory where the FFIs are saved.  This
     script assumes that all the FFIs of interest are in that
     directory, regardless of camera or CCD.  The reference .h5 files
     must be saved in <data_dir_path>/ref_stars.

  <debug_flag> is an integer, 0 for no output, 1 to print various
    debugging statements.  The default is 0.

"


[ $# -eq 0 ] && { echo "$USAGE" ; exit ; }

while [ $# -gt 0 ] ; do
  case $1 in
    "-h" | "--help") echo "$USAGE" ; exit  ;;
    *)         eval $1 ;;
  esac
  shift
done

#check that all variables are set
[[ $SECTOR == '' ]] && { echo "$USAGE" ; echo "set sector to a two digit integer : SECTOR=<\d\d>" ; exit ; }
[[ $dstem == '' ]] &&  { echo "$USAGE" ; echo "set dstem to the location of the data: dstem=<path_to_data>" ;  exit ; }



for i in 1 2 3 4; do 
    for j in 1 2 3 4; do
	ref_file=$(ls "$dstem"/ref_stars/hlsp_tica_tess_ffi_s*"$SECTOR"-"cam$i"-"ccd$j"_tess_*cat.h5)
	echo $ref_file
	step2_mkwcs.py -s ${SECTOR} -ca $i -cd $j -rd "$dstem"/"$ref_file" -if $(ls "$dstem"/tess*-"$i"-"$j"-*) -fd 6 --savediaginfo  -dbg $DEBUGIT --log tica_wcs_step2_spoc.log
    done
done

wait


# This uses GNU parallel to parallelize over the 16 camera ccd cameras
# In this parallel commmand there are two inputs given after :::
#  This will execute 16 jobs where {1} {2} are replaced by the inputs
#   in a {1}=1 {2}=1, {1}=1 {2}=2, ... {1}=4 {2}=3, {1}=4 {2}=4. 
#   The quote at the end for the third input {3} is the only way I could
#    get a single quote in the command so the wild card is not expanded on the
#    command line by the shell before calling python


#parallel --results mkwcs python step2_mkwcs.py -s ${SECTOR} -ca {1} -cd {2} -rd /pdo/users/faus/test_tica_wcs/s27/tso/refout/reftica_S27_O1_{1}{2}.h5 -if {3}/pdo/users/faus/test_tica_wcs/s27/tso/cam{1}_ccd{2}/tess\*-{1}-crm-ffi_ccd{2}.cal.fits{3} -fd 6 --savediaginfo -dbg ${DEBUGIT} ::: 1 2 3 4 ::: 1 2 3 4 ::: "\""
