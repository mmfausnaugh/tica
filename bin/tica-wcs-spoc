#!/usr/bin/env bash

# This uses GNU parallel to parallelize over the 16 camera ccd cameras
#  ***THIS modifies the input images to add WCS and a WCS target centroids fits extension
#SECTOR=27
#DEBUGIT=0

SECTOR=''
DEBUGIT=0

#dstem="/pdo/users/faus/test_tica_wcs/""s$SECTOR""/"
#dstem="/data/tess1/image_sub/""sector$SECTOR""/"
dstem=''

USAGE="
  Usage: tica-wcs-spoc SECTOR=<sector> dstem=<data_dir_path> DEBUGIT=<debug_flag>

  This script runs step2_mkwcs.py step2_mkwcs.py is a python script
  that loops over FFIs in a given directory, measures star positions,
  fits WCS coefficients, and adds the WCSs to the FFI headers.  The
  python script also adds a binary table extension to the FITS files
  that stores the measurements of the star centroids.  The FITS files
  are modified in place.

  This file (bash script) reconginzes SPOC file names.  It will run
  each camera/CCD in parallel, but the FITS files should be in a common
  directory called \$dstem.  

  This script and step2_mkwcs.py require a refence file that contains
  the RAs and DECs of suitable stars for fitting the WCS.  The file
  must be in .h5 format and match the structure of files used for the
  tica HLSPs.  The original files we used can be downloaded from the
  tica HLSP website on MAST (https://archive.stsci.edu/hlsp/tica).
  This script assumes that the .h5 file is saved in \$dstem/refout.

  <SECTOR> is a two digit integer.  It is used in calls to the
  tess-point python package, in order to convert row/col to ra/dec.

  <data_dir_path> is the directory where the FFIs are saved.

  <debug_flag> is an integer, 0 for no output, 1 to print various
  debugging statements.  The default is 0.

"


[ $# -eq 0 ] && { echo "$USAGE" ; exit ; }

while [ $# -gt 0 ] ; do
  case $1 in
    "-h" | "--help") echo "$USAGE" ; exit  ;;
    *)         eval $1 ;;
  esac
  shift
done

#check that all variables are set
[[ $SECTOR == '' ]] && { echo "$USAGE" ; echo "set sector to a two digit integer : SECTOR=<\d\d>" ; exit ; }
[[ $dstem == '' ]] &&  { echo "$USAGE" ; echo "set dstem to the location of the data: dstem=<path_to_data>" ;  exit ; }

# Example calling format
# python step2_mkwcs.py -s 29 -ca 1 -cd 1 -rd refout/ref_S29_Orbit66_11.h5 -if '/pdo/qlp-data/orbit-66/ffi/cam1/ccd1/FITS/*' -fd 5 --savediaginfo -dbg 0

# In this parallel commmand there are two inputs given after :::
#  This will execute 16 jobs where {1} {2} are replaced by the inputs
#   in a {1}=1 {2}=1, {1}=1 {2}=2, ... {1}=4 {2}=3, {1}=4 {2}=4. 
#   The quote at the end for the third input {3} is the only way I could
#    get a single quote in the command so the wild card is not expanded on the
#    command line by the shell before calling python


for i in 1 2 3 4; do 
    for j in 1 2 3 4; do
	ref_file=$(ls "$dstem"/ref_stars/hlsp_tica_tess_ffi_s*"$SECTOR"-"cam$i"-"ccd$j"_tess_*cat.h5)
	echo $ref_file
	step2_mkwcs.py -s ${SECTOR} -ca $i -cd $j -rd "$dstem"/"$ref_file" -if $(ls "$dstem"/tess*-"$i"-"$j"-*) -fd 6 --savediaginfo  -dbg $DEBUGIT 
    done
done

wait

#parallel --results mkwcs python step2_mkwcs.py -s ${SECTOR} -ca {1} -cd {2} -rd /pdo/users/faus/test_tica_wcs/s27/tso/refout/reftica_S27_O1_{1}{2}.h5 -if {3}/pdo/users/faus/test_tica_wcs/s27/tso/cam{1}_ccd{2}/tess\*-{1}-crm-ffi_ccd{2}.cal.fits{3} -fd 6 --savediaginfo -dbg ${DEBUGIT} ::: 1 2 3 4 ::: 1 2 3 4 ::: "\""
