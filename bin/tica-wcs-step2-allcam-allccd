#!/usr/bin/env bash


SECTOR=''
DEBUGIT=0

dstem=''

NCORES=''

USAGE="
  Usage: tica-wcs-step2-allcam-allccd SECTOR=<sector> dstem=<data_dir_path> DEBUGIT=<debug_flag> NCORES=<int>

  This script runs step2_mkwcs.py step2_mkwcs.py is a python script
    that loops over FFIs in a given directory, measures star
    positions, fits WCS coefficients, and adds the WCSs to the FFI
    headers.  The python script also adds a binary table extension to
    the FITS files that stores the measurements of the star centroids.
    The FITS files are modified in place.

  This script assumes that all FFIs and .h5 files are saved under TSO
    formats and naming conventions (see the
    tica-wcs-step1-allcam-allccd help menu).

  The TSO format files are not publicly available at this time.  See
    tica-calibrate-spoc and tica-wcs-spoc for the scripts that run
    TICA on publicly available SPOC FFIs.

  <sector> is a two digit integer.  It is used in calls to the
    tess-point python package, in order to convert row/col to ra/dec.

  <data_dir_path> is the directory where the FFIs are saved.
    Currently, this script assumes that 16 directories exist in this
    location, with naming convention /data_dir_path/cam\$i_ccd\$j/.
    This script also assumes that /data_dir_path/refout exists, and
    that .h5 files are saved there with the RAs and DECs of good stars
    for the WCS fit.  The .h5 files are produced with
    tica-wcs-step1-allcam-allccd.

  <debug_flag> is an integer, 0 for no output, 1 to print various
    debugging statements.  Default is 0.

   <int> is the number of cores to use for parallel processing.  Defaults to 1.
"
[ $# -eq 0 ] && { echo "$USAGE" ; exit ; }

while [ $# -gt 0 ] ; do
  case $1 in
    "-h" | "--help") echo "$USAGE" ; exit  ;;
    *)         eval $1 ;;
  esac
  shift
done

#check that all variables are set
[[ $SECTOR == '' ]] && { echo "$USAGE" ; echo "set sector to a two digit integer : SECTOR=<\d\d>" ; exit ; }
[[ $dstem == '' ]] &&  { echo "$USAGE" ; echo "set dstem to the location of the data: dstem=<path_to_data>" ;  exit ; }


[[ "$NCORES" == '' ]] && let NCORES=1

for i in 1 2 3 4; do 
    for j in 1 2 3 4; do
	step2_mkwcs.py -s ${SECTOR} -ca $i -cd $j -rd "$dstem"/refout/reftica_s$"$SECTOR"_"$i""-$j".h5 -if $(ls "$dstem"/cam"$i"_ccd"$j"/tess*-"$i"-crm-ffi_ccd"$j".cal.fits) -fd 6 --savediaginfo -dbg $DEBUGIT --log tica_logs/tica_wcs_step2_cam"$i"_ccd"$j".log  --parallel $NCORES 
    done
done

wait


# In this parallel commmand there are two inputs given after :::
#  This will execute 16 jobs where {1} {2} are replaced by the inputs
#   in a {1}=1 {2}=1, {1}=1 {2}=2, ... {1}=4 {2}=3, {1}=4 {2}=4. 
#   The quote at the end for the third input {3} is the only way I could
#    get a single quote in the command so the wild card is not expanded on the
#    command line by the shell before calling python

#parallel --results mkwcs python step2_mkwcs.py -s ${SECTOR} -ca {1} -cd {2} -rd /pdo/users/faus/test_tica_wcs/s27/tso/refout/reftica_S27_O1_{1}{2}.h5 -if {3}/pdo/users/faus/test_tica_wcs/s27/tso/cam{1}_ccd{2}/tess\*-{1}-crm-ffi_ccd{2}.cal.fits{3} -fd 6 --savediaginfo -dbg ${DEBUGIT} ::: 1 2 3 4 ::: 1 2 3 4 ::: "\""
