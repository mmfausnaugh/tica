#!/usr/bin/env bash

# This uses GNU parallel to parallelize over the 16 camera ccd cameras
#  ***THIS modifies the input images to add WCS and a WCS target centroids fits extension
#SECTOR=27
#DEBUGIT=0

SECTOR=''
DEBUGIT=0

#dstem="/pdo/users/faus/test_tica_wcs/""s$SECTOR""/"
#dstem="/data/tess1/image_sub/""sector$SECTOR""/"
dstem=''


USAGE="
  Usage: tica-wcs-step2-allcam-allccd SECTOR=<sector> dstem=<data_dir_path> DUBIT=<debug_flag>

  This script runs step2_mkwcs.py step2_mkwcs.py is a python script
  that loops over FFIs in a given directory, measures star positions,
  fits WCS coefficients, and adds the WCSs to the FFI headers.  It
  also adds an binary table extension to the FITS files with the
  measured star centroids.

  <SECTOR> is a two digit integer---calls to tess-point are used to
  convert row/col to ra/dec.

  <data_dir_path> is the directory where the FFIs are saved.
  Currently assumes 16 directories, with naming convention
  /data_dir_path/camX_ccdY/.  Note that the script makes
  /data_dir_path/refout, and saves the h5 file there.

  <debug_flag> is an integer, 0 for no output, 1 to print various
  debugging statements.  Default is 0.

"
[ $# -eq 0 ] && { echo "$USAGE" ; exit ; }

while [ $# -gt 0 ] ; do
  case $1 in
    "-h" | "--help") echo "$USAGE" ; exit  ;;
    *)         eval $1 ;;
  esac
  shift
done

#check that all variables are set
[[ $SECTOR == '' ]] && { echo "$USAGE" ; echo "set sector to a two digit integer : SECTOR=<\d\d>" ; exit ; }
[[ $dstem == '' ]] &&  { echo "$USAGE" ; echo "set dstem to the location of the data: dstem=<path_to_data>" ;  exit
 ; }



# Example calling format
# python step2_mkwcs.py -s 29 -ca 1 -cd 1 -rd refout/ref_S29_Orbit66_11.h5 -if '/pdo/qlp-data/orbit-66/ffi/cam1/ccd1/FITS/*' -fd 5 --savediaginfo -dbg 0

# In this parallel commmand there are two inputs given after :::
#  This will execute 16 jobs where {1} {2} are replaced by the inputs
#   in a {1}=1 {2}=1, {1}=1 {2}=2, ... {1}=4 {2}=3, {1}=4 {2}=4. 
#   The quote at the end for the third input {3} is the only way I could
#    get a single quote in the command so the wild card is not expanded on the
#    command line by the shell before calling python


for i in 1 2 3 4; do 
    for j in 1 2 3 4; do
	step2_mkwcs.py -s ${SECTOR} -ca $i -cd $j -rd "$dstem"refout/reftica_s$"$SECTOR"_"$i""-$j".h5 -if $(ls "$dstem"/cam"$i"_ccd"$j"/tess*-"$i"-crm-ffi_ccd"$j".cal.fits) -fd 6 --savediaginfo -dbg $DEBUGIT &
    done
done

wait

#parallel --results mkwcs python step2_mkwcs.py -s ${SECTOR} -ca {1} -cd {2} -rd /pdo/users/faus/test_tica_wcs/s27/tso/refout/reftica_S27_O1_{1}{2}.h5 -if {3}/pdo/users/faus/test_tica_wcs/s27/tso/cam{1}_ccd{2}/tess\*-{1}-crm-ffi_ccd{2}.cal.fits{3} -fd 6 --savediaginfo -dbg ${DEBUGIT} ::: 1 2 3 4 ::: 1 2 3 4 ::: "\""
