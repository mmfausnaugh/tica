#!/usr/bin/env python
#
#Copyright (c) 2021 Michael Fausnaugh
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the Software), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

import sys
import os.path
import scipy as sp
from astropy.io import fits
import matplotlib.pyplot as plt
import argparse
import logging
from multiprocessing import Pool
from time import time

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import scipy as sp
import matplotlib.pyplot as plt

import tica
from tica.tica import Calibration, Sector, CCD, CCD_File, FFI, FFI_File


#def worker(filename, calibration=None, outdir="."):
def worker( in_tuple ):
    im1 = fits.getdata(in_tuple[0])
    im2 = fits.getdata(in_tuple[1])
    im3 = fits.getdata(in_tuple[2])
    im4 = fits.getdata(in_tuple[3])
    im1 = sp.c_[sp.zeros((2048,44)),  im1, sp.zeros((2048,44))]
    im1 = sp.r_[im1,sp.zeros((30,2136)) ]
    im2 = sp.c_[sp.zeros((2048,44)),  im2, sp.zeros((2048,44))]
    im2 = sp.r_[im2, sp.zeros((30,2136))]
    im3 = sp.c_[sp.zeros((2048,44)),  im3, sp.zeros((2048,44))]
    im3 = sp.r_[im3, sp.zeros((30,2136)) ]
    im4 = sp.c_[sp.zeros((2048,44)),  im4, sp.zeros((2048,44))]
    im4 = sp.r_[im4, sp.zeros((30,2136)) ]

    ccd1 = CCD(im1)
    ccd2 = CCD(im2)
    ccd3 = CCD(im3)
    ccd4 = CCD(im4)

    outdir = in_tuple[4]
    outfile = in_tuple[5]

    im = FFI(
        sp.zeros((4156,4272))
    )
    im.CCDs = sp.array([ccd1,ccd2,ccd3,ccd4])
    imout = im.get_frame(im.CCDs)
    fits.writeto(os.path.join(outdir,outfile),imout)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog='tica', description="Calibrate FITS files")
    parser.add_argument("f1")
    parser.add_argument("f2")
    parser.add_argument("f3")
    parser.add_argument("f4")
    parser.add_argument("--outdir", metavar="DIRECTORY", help="directory in which to place the results")
    parser.add_argument("--outfile", help="output file name")
    parser.add_argument("--version", action="version", version="tica %s" % tica.version)
    parser.add_argument("-d", "--debug", action="store_true", help="emit extra diagnostic information to log")
    parser.add_argument("-l", "--log", metavar="LOG_FILE", help="log file")

    args = parser.parse_args()

    # setup logging
    tica.setup_logging(debug=args.debug, filename=args.log)
    logger = logging.getLogger(__name__)

    if args.outdir:
        outdir=args.outdir
    else:
        outdir="."  # if outdir is not set, default to current directory


    starttime = time()

    worker( (args.f1, args.f2, args.f3, args.f4, outdir, args.outfile))
    runtime = time() - starttime

    print("Runtime: {0:.2f}sec".format(runtime), "parallel" if args.parallel else "single" )

