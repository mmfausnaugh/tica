#!/usr/bin/env python

import numpy as np
import os
import re
import sys
import h5py
import argparse
from datetime import datetime

def calculate_step2_metrics(infile):
    d = h5py.File(infile,'r')

    #print(d.keys())
    #require some minimum good frac?
    try:
        good_frac =d['goodStarFracs'][:]
        frac95 = len(good_frac[ good_frac > 0.95])/len(good_frac)
        
        m =  good_frac > 0.75
        avg_good_frac = np.mean(good_frac[m])

    except KeyError:
        good_frac = None
        frac95    = None

        m = np.ones(len(d['allStds'][:]),dtype=bool)
        avg_good_frac = None

    avg_std_arcsec = np.mean( d['allStds'][:][m] )
    avg_std_pix = np.mean( d['allPixStds'][:][m] )
    
    return frac95, avg_good_frac, avg_std_arcsec, avg_std_pix

def calculate_step1_metrics(infile):
    d = h5py.File(infile,'r')
    #print(d.keys())
    N_tics = len(d['tics'])

    bright_tmag = min(d['tmags'][:])
    faint_tmag  = max(d['tmags'][:])
    return N_tics, bright_tmag,faint_tmag

def test_output_dict(in_dict):
    for key in in_dict.keys():
        if key == 'start_date':
            continue
        if key == 'end_date':
            continue
        if len(in_dict[key]) == 0:
            continue

        #print(key,len(in_dict[key]))
        #print(key,len(in_dict[key]))
        assert (len(in_dict[key]) == 16)

    for key in ['tica_ver','py_ver', 'host', 
                'py_env', 'sector',
                'wcs_sector',
                'reffin', 
                'flexible_apertures']:

        if len(in_dict[key]) == 0:
            continue

        nan_mask = [True if type(e) == str else False for e in in_dict[key] ]
        if len(np.unique(np.array(in_dict[key])[nan_mask])) == 0:
            continue
        assert len(np.unique(np.array(in_dict[key])[nan_mask])) == 1

        in_dict[key] = np.unique( np.array(in_dict[key])[nan_mask] )[0]


def get_from_logs(infile):
    
    with open(infile,'r') as fout:
        #first line says when we started, should be tica verson
        fline = fout.readline()
        start_date, start_time, message1,message2, tica_version = fline.split()
        assert ' '.join([message1,message2]) == 'TICA version:'
        tica_ver_working = tica_version

        tica_ver   = [np.nan]*16

        py_ver     = [np.nan]*16
        host       = [np.nan]*16
        py_env     = [np.nan]*16
        sector     = [np.nan]*16
        N_pools    = [np.nan]*16
        runtime    = [np.nan]*16

        wcs_sector = [np.nan]*16

        #these are special---will be used to compute
        #indices of output dict for wcs runs
        cam = 0
        ccd = 0

        ref        = [np.nan]*16
        reffin     = [np.nan]*16
        wing       = [np.nan]*16
        contrast   = [np.nan]*16
        N_ref_targets= [np.nan]*16
        ref_bright_fit_res = [np.nan]*16
        ref_faint_fit_res   = [np.nan]*16
        N_ref_trim_targ      = [np.nan]*16

        flexible_apertures = [np.nan]*16

        for fline in fout.readlines():
            if 'TICA version:' in fline:
                tica_ver_reg = re.search('TICA version: (.*)',fline)
                tica_ver_working = tica_ver_reg.group(1)
            if 'Python version:' in fline:
                py_ver_reg = re.search('Python version: (.*) \(',fline)
                py_ver_working =  py_ver_reg.group(1) 
            if 'Host:' in fline:
                host_reg = re.search('Host: (.*)',fline)
                host_working =  host_reg.group(1)
            if 'python environment:' in fline:
                py_env_reg = re.search('python environment:  (.*)',fline)
                py_env_working =  py_env_reg.group(1) 

            if 'sector = ' in fline:
                wcs_sector_reg = re.search('sector = (\d\d)',fline)
                wcs_sector_working =  wcs_sector_reg.group(1) 


            if 'working directory' in fline:
                sector_reg = re.search('/sector(\d\d)/',fline)

                cam_reg = re.search('/cam(\d)_ccd(\d)',fline)
                cam = cam_reg.group(1) 
                ccd = cam_reg.group(2) 
                #set idx and previous variables
                map_idx = 4*(int(cam) -1) + ( int(ccd) -1)
                tica_ver[map_idx] = tica_ver_working
                py_ver[map_idx] = py_ver_working
                host[map_idx] = host_working
                py_env[map_idx] = py_env_working
                sector[map_idx] = sector_reg.group(1) 


            #wcs log pattern
            if 'camera = ' in fline:
                #we should always see a ccd line next
                cam_reg = re.search('camera = (\d)',fline)
                cam = cam_reg.group(1) 
            #wcs log pattern
            if 'ccd = ' in fline:
                ccd_reg = re.search('ccd = (\d)',fline)
                ccd = ccd_reg.group(1) 

                #set idx and previous variables
                map_idx = 4*(int(cam) -1) + ( int(ccd) -1)
                tica_ver[map_idx] = tica_ver_working
                py_ver[map_idx] = py_ver_working
                host[map_idx] = host_working
                py_env[map_idx] = py_env_working
                wcs_sector[map_idx] = wcs_sector_working

            if 'N Pools' in fline:
                pool_reg = re.search('N Pools = (\d+)',fline)
                N_pools[map_idx] =  pool_reg.group(1)
            if 'Runtime:' in fline:
                runtime_reg = re.search('Runtime: (.*)sec',fline)
                runtime[map_idx] =  runtime_reg.group(1)


            if 'refimage' in fline:
                if 'fits' not in fline:
                    continue
                ref_reg = re.search('refimage = (.*)',fline)
                ref[map_idx] =  ref_reg.group(1) 
                reffin_reg = re.search('-(\d\d\d\d\d\d\d\d)-',ref[map_idx])
                reffin[map_idx] =  reffin_reg.group(1) 
            if 'wing = ' in fline:
                wing_reg = re.search('wing = (.*)',fline)
                wing[map_idx] =  wing_reg.group(1) 
            if 'contrast = ' in fline:
                contrast_reg = re.search('contrast = (.*)',fline)
                contrast[map_idx] =  contrast_reg.group(1) 
            if 'ref targets,' in fline and 'nTrim:' in fline:
                reg1 = re.search('(\d*) ref targets',fline)                
                N_ref_targets[map_idx] =  reg1.group(1)
                
                reg1 = re.search('bright (.*) faint',fline)
                ref_bright_fit_res[map_idx] = reg1.group(1)

                reg1 = re.search('faint (.*) nTrim:',fline)
                ref_faint_fit_res[map_idx] = reg1.group(1)
                
                reg1 = re.search('nTrim: (\d*)',fline)
                N_ref_trim_targ[map_idx] = reg1.group(1)

            if 'Using ' in fline and ' apertures.' in fline:
                reg1 = re.search('Using (\w*) apertures.',fline)
                flexible_apertures[map_idx] = reg1.group(1)


        message = fline.split()
        end_date, end_time = message[0], message[1]


        outputdict = {'start_date': start_date + '-' + start_time, 
                      'end_date'  : end_date + '-' + end_time,
                      'tica_ver':tica_ver,
                      'py_ver':py_ver, 
                      'host':host,
                      'py_env':py_env,
                      'sector':sector,
                      'N_pool':N_pools,
                      'runtime':runtime,
                      'wcs_sector':wcs_sector, 
                      'ref':ref, 
                      'reffin':reffin,
                      'wing':wing, 
                      'contrast':contrast,
                      'N_ref_targets':N_ref_targets,
                      'ref_bright_fit_res':ref_bright_fit_res,
                      'ref_faint_fit_res':ref_faint_fit_res,
                      'N_ref_trim_targ':N_ref_trim_targ,
                      'flexible_apertures':flexible_apertures,
                    }


        #print(outputdict)
        return outputdict


        


if __name__ == "__main__":
    #assume that the working directory is a standard run
    #columns:

    #TICA params
    #time start, time stop, ncores, runtime
    #TICA version, python version, Host, environment
    #sector, orbit(s), 
    

    #wcs step1 params
    #time start, time stop, Runtime
    #TICA version, python version, Host, environment
    #sector,
    #REFFIN, wing, contrast

    #wcs step2 params
    #time start, time stop, Runtime
    #TICA version, python version, Host, environment
    #sector
    

    #per ccd
    # step1: N_ref targets, N_bright ref targets, Ntrim, reference fit resid bright,
    #step 2: average GdFrac, frac goodFrac > 0.99, 
    #average stds arcsec (all), average std pixel (all)

    description_string = """

    This script scrapes logs in the tica production directories, and updates the Markdown table in the github repo.

    """

    parser = argparse.ArgumentParser(prog='tica-production-table', description=description_string)
    parser.add_argument("-s", "--segments", type=str, 
                        help="Segments of sector; orbit 1 or 2 in EM1,"
                        "o1a, o1b, o2a, or o2b in EM2.  Can only enter one segment at a time.")
    parser.add_argument("--wcs1", action='store_true',
                        help="If set, scrape the tica_wcs_step1.log file and populate columns.")
    args = parser.parse_args()




    head_labels = ['Sector','Segment',
                   'Date Start','Date End','Total Time (days)',
                   'TICA version','Python version','Host','conda Environment',
                   'CCD',
                   'TICA Runtime (sec)','N_cores',
                   'WCS2 Runtime (sec)','N_cores',
                   'Frac_of_FFIs >0.95Ref_Stars', 'AvgFrac Ref_Stars',
                   'AvgFit Residual (arcsec)','AvgFit Residual (pixel)',
                   'Flexible Apertures',
                   'Ref_FIN',
                   'WCS1 Runtime (sec)','N_cores',
                   'Wing FAC','Contrast FAC',
                   'NRef_Stars', 'Ref_Star Tmags','N_Trim_Stars',
                   'Ref_Bright Residuals (arcsec)',
               ]
    header_list = ['{:>35s}'.format( head_label) for head_label in head_labels]
    header_list.append('')
    header_list.insert(0,'')
    header = '|'.join(header_list)
    align_list = [':---:' for head_label in head_labels]
    #align right
    align_list[4] = '---:'   #total time
    align_list[10] = '---:'  #tica runtime
    align_list[11] = '---:'  #N cores 
    align_list[12] = '---:'  #WCS2 Runtime
    align_list[13] = '---:'  #N cores
    align_list[14] = '---:'  #frac with 0.95
    align_list[15] = '---:'  #avg Frac
    align_list[16] = '---:'  #Avg fit resid (arcsec)
    align_list[17] = '---:'  #Avg fit resid (pix)
    align_list[18] = '---:'  #flexible aperture
    align_list[20] = '---:'  #WCS1 Runtime
    align_list[21] = '---:'  #Ncores
    align_list[24] = '---:'  #Nref
    align_list[26] = '---:'  #Ntrim
    align_list[27] = '---:'  #bright res

    

    align_list.append('')
    align_list.insert(0,'')
    align = '|'.join(align_list)

    outdir = os.path.abspath(os.path.dirname(
        os.path.dirname(__file__)) )
    outfile = os.path.join(outdir,'production_table.md')
    if os.path.isfile(outfile):
        pass
    else:
        with open(outfile,'w') as fout:
            fout.write(header +'\n')
            fout.write(align +'\n')


    #load up the data
    orbit_string = ''        


    out = get_from_logs('tica_logs/{}_tica.log'.format(args.segments) )
    test_output_dict(out)
    start_date = out['start_date']
    start_date_object = datetime.strptime(out['start_date'],'%Y.%m.%d-%H:%M:%S')
    #datetime.strptime(s,'%Y.%m.%d-%H:%M:%S')
    #get timedelta, and then duration is
    #dt.days*86400 + dt.seconds
    end_date = out['end_date']
    end_date_object1 = datetime.strptime(out['end_date'],'%Y.%m.%d-%H:%M:%S')

    #print( out )
    sector = out['sector']

    if args.wcs1:
        out2 = get_from_logs('tica_logs/tica_wcs_step1.log')
        test_output_dict(out2)
    else:
        out2 = None
    #print( out2 )


    out3 = []
    ref_star_data = []
    wcs_data = []
    for ii in [1,2,3,4]:
        for jj in [1,2,3,4]:

            ref_star_file = 'refout/reftica_s{:02d}_{}-{}.h5'.format(int(sector),ii,jj)
            ref_star_data.append(calculate_step1_metrics(ref_star_file) )

            wcs_file = 'cam{}_ccd{}/wcs_diags2/wcs_diag_S{:02d}_{}{}_data.h5'.format(ii,jj,
                                                                                 int(sector),
                                                                                     ii,jj)
            wcs_data.append(calculate_step2_metrics(wcs_file) )
            ccd_log_file = 'tica_logs/tica_wcs_step2_cam{}_ccd{}.log'.format(ii,jj)
            out3.append( get_from_logs(ccd_log_file))
            test_output_dict(out3[-1])
            end_date_object = datetime.strptime(out3[-1]['end_date'],'%Y.%m.%d-%H:%M:%S')

            if end_date_object > end_date_object1:
                end_date = out3[-1]['end_date']
                end_date_object1 = datetime.strptime(out3[-1]['end_date'],'%Y.%m.%d-%H:%M:%S')


    #check that these are the same across all logs    
    #'Sector','TICA version','Python version',
    #'Host','Environment','Flexibel Apertures', 
    if out2 is not None:
        assert out['sector'] == out2['wcs_sector']

        for s in out3:
            assert out['sector'] == s['wcs_sector']

    for key in ['tica_ver','py_ver','host','py_env']:
        
        if out2 is not None:
            try:
                assert out[key] == out2[key]
            except AssertionError as e:
                print('Warning!! key {} in wcs step1 {} not equal to {}'.format(out2[key], out[key]))
                
        for s in out3:
            try:
                assert out[key] == s[key], print(key, out[key], s[key])
            except AssertionError as e:
                print('Warning!! key {} in wcs step2 {} not equal to {}'.format(out3[key], out[key]))
                            

    t1 = datetime.strptime(start_date,'%Y.%m.%d-%H:%M:%S')
    t2 = datetime.strptime(end_date,'%Y.%m.%d-%H:%M:%S')
    dt = t2 -t1

    for ii in [0,1,2,3]:
        for jj in [0,1,2,3]:
            if ii == 0 and jj == 0:
                #print(orbit_string, orbit_string.replace('_',''))
                outline_list = [ '{:>04d}'.format( int(out['sector'])), 
                                 '{:>35s}'.format( args.segments), 
                                 '{:>35s}'.format(start_date),
                                 '{:>35s}'.format(end_date),
                                 '{:>35.3f}'.format( (dt.days*86400 + dt.seconds)/86400 ),
                                 '{:>35s}'.format(out['tica_ver']),
                                 '{:>35s}'.format(out['py_ver']),
                                 '{:>35s}'.format(out['host']),
                                 '{:>35s}'.format(out['py_env']), ]
                        
            else:
                outline_list = ['{:>35s}'.format('') for _ in range(9)]
                #if one ever wanted to load the table into pandas or numpy,
                #useful to match a sector for each ccd
                outline_list[0] = '{:>04d}'.format( int(out['sector']))
                outline_list[1] = '{:>35s}'.format( args.segments ) 

            idx = 4*ii + jj
            outline_list.append('{:>35s}'.format('cam{}_ccd{}'.format(ii+1,jj+1 )))
            if jj == 0:
                outline_list.append( '{:>35s}'.format(out['runtime'][idx]) )
                outline_list.append( '{:>35s}'.format(out['N_pool'][idx]) )
            else:
                outline_list.append('{:>35s}'.format(''))
                outline_list.append('{:>35s}'.format(''))           

            print(out3[idx]['runtime'])
            outline_list.append( '{:>35s}'.format(out3[idx]['runtime'][idx] ))
            outline_list.append( '{:>35d}'.format(1))

            outline_list.append('{:>.2f}'.format(wcs_data[idx][0]))
            outline_list.append('{:>.2f}'.format(wcs_data[idx][1]))
            outline_list.append('{:>.3f}'.format(wcs_data[idx][2]))
            outline_list.append('{:>.2f}'.format(wcs_data[idx][3]))
            outline_list.append( '{:>35s}'.format(out3[idx]['flexible_apertures'] ))


            if out2 is  None:
                outline_list.append( '{:>35s}'.format('') )
            elif ii == 0 and jj == 0:
                outline_list.append( '{:>35s}'.format(out2['reffin']) )
            else:
                outline_list.append( '{:>35s}'.format('') )

            if out2 is None:
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )
                outline_list.append('{:>35s}'.format('') )

            else:
                outline_list.append( '{:>35s}'.format(out2['runtime'][idx] ))
                outline_list.append( '{:>35d}'.format(1))
                outline_list.append('{:>35s}'.format(out2['wing'][idx] ))
                outline_list.append('{:>35s}'.format(out2['contrast'][idx] ))
                outline_list.append('{:>35s}'.format(out2['N_ref_targets'][idx] ))
                outline_list.append('{:>.2f}-{:>.2f}'.format(ref_star_data[idx][1],
                                                             ref_star_data[idx][2]))
                outline_list.append('{:>35s}'.format(out2['N_ref_trim_targ'][idx] ))
                outline_list.append('{:>35s}'.format(out2['ref_bright_fit_res'][idx] ))
                #outline_list.append('{:>35s}'.format(out2['ref_faint_fit_res'][idx] ))


            outline_list.append('')
            outline_list.insert(0,'')
            outline = '|'.join(outline_list)                    
            

            #print(outline)
            with open(outfile,'a') as fout:
                fout.write(outline +'\n')
