#!/usr/bin/env bash

# sets up directories for output of tica-cal-ffi2ccds.  
#     The user sets the location of the data, which should be
#     uncalibrated FFIs from the full camera.  Currently, these 
#     are not public, and so this is closely set to the structure 
#    of the POC filesystem.
#  
#    User also should set the calibration directory, either in an 
#    environment variable or as a command line argument.


usage() {
    cat <<EOF
  Sets up directories for output of tica-cal-ffi2ccds, and runs
   that python script.

  Requires CALDIR, location of data, and which orbits (that is specific to
   poc filesystem, for us in TSO). 

EOF
exit
}

o1=$1
o2=$2
#directory where data are; assume that subdirs are
#orbit-${o1}/ffi_fits and same for o2
dstem=$3
#~/python/tica/calibration_10min

#consider logic like this for setting CALDIR
#[[ -z "${DEPLOY_ENV}" ]] && MyVar='default' || MyVar="${DEPLOY_ENV}"
CALDIR=$4

while [ $# -gt 0 ] ; do
  case $1 in
    --help)     usage   ;;
    -h)         usage   ;;
    *)          eval $1 ;;
  esac
  shift
done


for i in 1 2 3 4; do
    for j in 1 2 3 4; do
	mkdir cam${i}_ccd${j}
    done
done

#make in list for tica
for i in 1 2 3 4; do
    cd cam${i}_ccd1

    if [ -e inlist ]; then
	rm -f inlist
    fi

    if [ $o1 != "None" ]; then
	ls ${dstem}//orbit-${o1}/ffi_fits/tess*-${i}-crm-ffi.fits* > inlist
    fi

    if [ $o2 != "None" ]; then
	ls ${dstem}/orbit-${o2}/ffi_fits/tess*-${i}-crm-ffi.fits* >> inlist
    fi

#    rm -f inlist

#new pdo disk
#    ls /data/tess1/pdodata2/poc-data/orbits/orbit-${o1}/ffi_fits/tess*-${i}-crm-ffi.fits* > inlist
#    ls /data/tess1/pdodata2/poc-data/orbits/orbit-${o2}/ffi_fits/tess*-${i}-crm-ffi.fits* >> inlist
    cd ..
done

#run tica
for i in 1 2 3 4; do    
    cd cam${i}_ccd1
#    python ~/python/tica/bin/tica-cal-ffi2ccds inlist --outdir . --caldir ~/python/tica/calibration --parallel --log ../tica.log
    tica-cal-ffi2ccds inlist --outdir . --caldir $CALDIR --parallel --log ../tica.log
    for j in 2 3 4; do
	mv tess*ccd${j}.cal.fits* ../cam${i}_ccd${j}
    done
    cd ..
done

for i in 1 2 3 4; do
   for j in 1 2 3 4; do
       cd "cam$i""_ccd$j"
       gunzip *gz &
       cd ..
   done
done
wait

